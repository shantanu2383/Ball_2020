# -*- coding: utf-8 -*-
"""Copy of 0304 CROSS SECTION OF EXPECTED RETURNS.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1zCxbeM2xVEzlvtzVnEHzGZlDJDECoijC

# Earnings, Retained Earnings and B/M in the cross section of expected returns
"""

from google.colab import drive
drive.mount("/content/gdrive", force_remount=True)


import pandas as pd
import statsmodels.formula.api as smf
import numpy as np
import matplotlib.pyplot as plt

!pip install pandasql
import os
from datetime import datetime
from sklearn.model_selection import train_test_split
from statsmodels.tsa.stattools import adfuller
from statsmodels.tsa.seasonal import seasonal_decompose
from statsmodels.tsa.arima_model import ARIMA
from sklearn.metrics import mean_squared_error, mean_absolute_error

import math
import matplotlib.pyplot as plt
from datetime import datetime
import seaborn as sns
import pandasql as ps

from sqlite3 import connect
conn=connect(':memory:')

"""# DATALOAD

CRSP:
"""

filepath="/content/gdrive/MyDrive/B_M/"

file="CRSPMONTHLY.csv"
crsp=pd.read_csv(filepath + file)

crsp['date'] = pd.to_datetime(crsp['date'], format="%Y%m%d")


crsp=crsp[("1960-01-01"<=crsp['date']) & (crsp['date']< "2019-01-01")]
crsp_parsed=crsp[['PERMNO', 'date', 'RET', 'SHROUT', 'ALTPRC', 'EXCHCD', 'SHRCD', 'SICCD', 'DLRET', 'DLSTCD', 'VOL']]
crsp=crsp_parsed


x=['PERMNO', 'RET', 'SHROUT', 'ALTPRC', 'EXCHCD', 'SHRCD', 'SICCD', 'DLRET', 'DLSTCD']

for i in x:
  crsp[i]=pd.to_numeric(crsp[i], errors='coerce')


#convert returns to percent:
crsp['RET']*=100
crsp['DLRET']*=100


#add market cap column
crsp['mkt_cap']=abs(crsp['SHROUT'] * crsp['ALTPRC'])/1000
crsp['mkt_cap'].replace(0, np.NaN, inplace=True)


#ONLY KEEP US BASED COMMON STOCKS
crsp=crsp[(crsp['SHRCD']==10)|(crsp['SHRCD']==11)]

#rename variables to lower case
crsp= crsp.rename(columns=str.lower)

#filter for relevant exchanges
exchange_mapping = {
    1: 'NYSE', 31: 'NYSE',
    2: 'AMEX', 32: 'AMEX',
    3: 'NASDAQ', 33: 'NASDAQ'
}
#create dictionary to map values of the 'exchcd' column
crsp['exchange'] = np.select(
    [crsp['exchcd'].isin(exchange_mapping.keys()), crsp['exchcd'].notnull()],
    [crsp['exchcd'].map(exchange_mapping), "Other"],
    default='Other')


#Adjust Returns
crsp['ret_adj'] = crsp['ret']

mask1 = pd.isnull(crsp['dlstcd'])
crsp.loc[mask1, 'ret_adj'] = crsp.loc[mask1, 'ret']

mask2 = pd.notnull(crsp['dlstcd']) & pd.notnull(crsp['dlret'])
crsp.loc[mask2, 'ret_adj'] = crsp.loc[mask2, 'dlret']

mask3 = ((551 <= crsp['dlstcd']) & (crsp['dlstcd'] <= 574)) | (crsp['dlstcd'].isin([500, 520, 580, 584]))
crsp.loc[mask3, 'ret_adj'] = -30

crsp.loc[~(mask1 | mask2 | mask3), 'ret_adj'] = -100

crsp.drop(['shrcd', 'dlret', 'dlstcd'], inplace=True, axis=1)

#exclude financial firms
crsp=crsp[(crsp['siccd']<6000) |(crsp['siccd']>6999) ]


#Add reference date for matching with Compustat

crsp['date']=pd.to_datetime(crsp['date'])
crsp['year']=crsp['date'].dt.year

crsp['reference_date']=pd.to_datetime(crsp['year'].astype(str) +'-06-01')

crsp.loc[crsp['date'].dt.month < 6, 'year'] -= 1

crsp.loc[crsp['date'].dt.month < 6, 'reference_date'] = pd.to_datetime(
    crsp['year'].astype(str) + '-06-01')

crsp = crsp.drop('year', axis=1)

crsp.set_index('date', inplace=True)

crsp.sort_values(by=['date', 'permno'], inplace=True)

#drop any securities that do not have observations for t-12 returns
columns=[]
for x in range(1,13):
  label=f"return_t-{x}"
  columns.append(label)
  crsp[f'return_t-{x}']=crsp.groupby('permno')['ret_adj'].shift(x)

crsp.dropna(subset=columns, inplace=True)

crsp.dropna(subset=['ret_adj'], inplace=True)

"""Compustat:"""

filepath="/content/gdrive/MyDrive/B_M/"

compustat=pd.read_csv(filepath + "compustat.csv")
compustat

#parse relevant variables from compustat
compustat= compustat.rename(columns=str.lower)
x=['gvkey', 'lpermno', 'datadate', 'linktype', 'linkenddt', 'seq', 'ceq',
                    'at', 'lt', 'txditc', 'txdb', 'itcb', 'pstkrv', 'pstkl', 'pstk', 'indfmt', 'datafmt',
                     'revt', 'cogs', 'xint', 'xsga', 'xrd', 'rect', 'invt', 'xpp', 'drc', 'drlt', 'ap', 'xacc',
                      'cstk', 'caps', 'tstk', 're', 'acominc', 'mkvalt']

compustat=compustat[x]


dates=['datadate', 'linkenddt']
for date in dates:
  compustat[date]=pd.to_datetime(compustat[date], format="%Y%m%d", errors='coerce')

#filter columns
compustat['datafmt']=compustat['datafmt'].apply(str)
compustat=compustat[compustat["indfmt"]=="INDL"]
compustat=compustat[compustat['datafmt']=="STD"]

#Only keep valid links
compustat=compustat[(compustat["linktype"]=="LU")| (compustat["linktype"]=="LC")]

#Only keep links active at datadate
compustat=compustat[(compustat['datadate']<=compustat["linkenddt"]) | pd.isnull(compustat['linkenddt'])]

#calculate book value using FF definition
compustat.to_sql("compustat", conn, if_exists='replace')

query='''
        SELECT DISTINCT *,
        COALESCE(seq, ceq+pstk, at-lt) + COALESCE(txditc, txdb + itcb, 0)- COALESCE(pstkrv, pstkl, pstk, 0) as book_value
        FROM compustat'''

compustat_calc=pd.read_sql(query, conn)

compustat=compustat_calc
#add reference date for matching- We lag accounting information by 6 months,
#therefore if a firms financial year ends in June, we assume this information is
#available to investors the following June
compustat['datadate']=pd.to_datetime(compustat['datadate'], errors='coerce')

compustat['year']=compustat['datadate'].dt.year
compustat['year']=pd.to_numeric(compustat['year'], errors='coerce')
compustat['reference_date']=compustat['year']+1
compustat['reference_date']=compustat['reference_date'].apply(str)
compustat['reference_date']+="-06-01"
compustat['reference_date']=pd.to_datetime(compustat['reference_date'])

compustat['re'].isnull().sum()

"""Match Compustat to Crsp on Reference Date (lagged 6 months)"""

compustat.rename(columns={'lpermno':'permno'}, inplace=True)
#compustat.drop('index', axis=1, inplace=True)

#compustat.rename(columns={'da_a/t-1': 'da_a_t_1'}, inplace=True)
crsp.to_sql("crsp", conn, if_exists='replace')
compustat.to_sql("compustat", conn, if_exists='replace')

query='''
        SELECT DISTINCT crsp.*, c.gvkey, c.seq, c.ceq, c.at, c.lt,
        c.txditc, c.txdb, c.itcb, c.pstkrv, c.pstkl, c.pstk,
        c.revt, c.cogs, c.xint, c.xsga, c.xrd, c.rect, c.invt,
        c.xpp, c.drc, c.drlt, c.ap, c.xacc, c.cstk, c.caps, c.tstk,
        c.re, c.acominc, c.mkvalt, c.book_value
        FROM crsp
        LEFT JOIN compustat c
        ON crsp.permno=c.permno
        AND crsp.reference_date=c.reference_date
        '''
crsp_comp=pd.read_sql(query, conn)
crsp=crsp_comp

"""Extract market cap at end of year as 'market value of equity'"""

crsp['date'] = pd.to_datetime(crsp['date'])
me=crsp[(crsp['date'].dt.month==12)]
me['reference_date']=(me['date'].dt.year) + 1
me['reference_date']=me['reference_date'].apply(str)
me['reference_date']+="-06-01"
me['reference_date']=pd.to_datetime(me['reference_date'])

me.to_sql('me', conn, if_exists='replace')

query='''
        SELECT DISTINCT permno, reference_date, mkt_cap as market_equity
        FROM me
        '''
me=pd.read_sql(query, conn)


crsp.to_sql('crsp', conn, if_exists='replace')
me.to_sql('me', conn, if_exists='replace')

query='''
        SELECT DISTINCT crsp.*, me.market_equity
        FROM crsp
        LEFT JOIN me
        ON crsp.permno=me.permno
        AND crsp.reference_date=me.reference_date
        '''
crsp_me=pd.read_sql(query, conn)

crsp=crsp_me

crsp.to_csv(filepath+ "crsp_compustat_clean.csv")

"""Filter the Sample Accordingly"""

filepath="/content/gdrive/MyDrive/B_M/"

crsp=pd.read_csv(filepath +"crsp_compustat_clean.csv" )

#Filter 2: Non-Missing Values for book value and market equity
# Drop missing values of market equity
crsp.dropna(subset=['market_equity'], inplace=True)

# Drop rows where both ceq and book_value are missing
crsp.dropna(subset=['ceq', 'book_value'], how='all', inplace=True)

#Filter 1: Non-Missing Values for current month returns and returns for the prior
#1 year period
'''
columns=[]
for x in range(1,13):
  label=f"return_t-{x}"
  columns.append(label)
  crsp[f'return_t-{x}']=crsp.groupby('permno')['ret_adj'].shift(x)

crsp.dropna(subset=columns, inplace=True)

crsp.dropna(subset=['ret_adj'], inplace=True)

#Filter 2: Non-Missing Values for book value and market equity
crsp.dropna(subset=['book_value', 'market_equity', 'ceq'], inplace=True)
'''

#construct components of book value

#CEQ=Contributed Capital + Retained Earnings + Other

#Contributed Capital= CSTK + CAPS + TSTK
crsp['tstk'].fillna(0, inplace=True)
crsp['cc']=crsp['cstk']+crsp['caps']-crsp['tstk']
#Retained Earnings= RE
#Other=ACOMINC
crsp['cc'] = crsp['cc'].clip(lower=-15000)

#Construct Book Value Componenents Scaled by Market Equity
crsp['book_to_market']=crsp['book_value']/crsp['market_equity']
crsp['reported_book_to_market']=crsp['ceq']/crsp['market_equity']
crsp['contributed_capital_to_market']=crsp['cc']/crsp['market_equity']
crsp['retained_earnings_to_market']=crsp['re']/crsp['market_equity']
crsp['other_book_to_market']=crsp['acominc']/crsp['market_equity']

#Construct Book Value Components Scaled by Book Value of Equity
crsp['re/b']=crsp['re']/crsp['ceq']
crsp['cc/b']=crsp['cc']/crsp['ceq']
crsp['other/b']=crsp['acominc']/crsp['ceq']

crsp.to_csv(filepath+ "crsp_bv.csv")

"""#Table 1 Panel A"""

crsp=crsp[("1964-07-01"<=crsp['date']) & (crsp['date']< "2018-01-01")]

#Construct dataframe
df = pd.DataFrame(columns=['Ratio', 'Mean', 'std_dev', 'Pct < 0', '10th', '25th', '50th', '75th', '90th'])

for x, label in zip(['book_to_market', 'reported_book_to_market',  'retained_earnings_to_market','contributed_capital_to_market', 'other_book_to_market'], ['Book-to-market', 'Reported book-to-market', 'Retained earnings-to-market', 'Contributed capital-to-market', 'Other book-to-market']):
  mean=crsp[x].mean()
  std_dev=crsp[x].std()

  #calculate percentage of values <0
  num_neg_values = (crsp[x] < 0).sum()
  percent_neg_values = num_neg_values /len(crsp) * 100

  quantiles = [0.1, 0.25, 0.5, 0.75, 0.9]
  results = crsp[x].quantile(quantiles)

  new_row = {'Ratio': label, 'Mean': mean, 'std_dev':std_dev, 'Pct < 0': percent_neg_values, '10th': results.loc[0.1], '25th':results.loc[0.25], '50th': results.loc[0.5], '75th': results.loc[0.75], '90th': results.loc[0.9]}
  df = df.append(new_row, ignore_index=True)

df=df.round(2)
df

"""Now we edit the sample to exclude firms where book value of equity is negative, and any of the componenents are not between -100% and 200% of the book value of equity."""

crsp=crsp[crsp['book_value']>0]
# Define the lower and upper bounds
ceq = crsp['ceq']
lower_lim = -1 * ceq
upper_lim = 2* ceq

# Filter the DataFrame
crsp_filtered = crsp[((crsp['cc'].isna()) | ((crsp['cc'] >= lower_lim) & (crsp['cc'] <= upper_lim))) &
                     ((crsp['re'].isna()) | ((crsp['re'] >= lower_lim) & (crsp['re'] <= upper_lim))) &
                     ((crsp['acominc'].isna()) | ((crsp['acominc'] >= lower_lim) & (crsp['acominc'] <= upper_lim)))]

crsp=crsp_filtered

df = pd.DataFrame(columns=['Ratio', 'Mean', 'std_dev', 'Pct < 0', '10th', '25th', '50th', '75th', '90th'])

for x, label in zip(['re/b', 'cc/b',  'other/b'], ['Retained Earnings(R/E)', 'Contributed Capital (CC)', 'Other(AOCI)']):
  mean=crsp[x].mean()
  std_dev=crsp[x].std()

  #calculate percentage of values <0
  num_neg_values = (crsp[x] < 0).sum()
  percent_neg_values = num_neg_values /len(crsp) *100

  quantiles = [0.1, 0.25, 0.5, 0.75, 0.9]
  results = crsp[x].quantile(quantiles)

  new_row = {'Ratio': label, 'Mean': mean, 'std_dev':std_dev, 'Pct < 0': percent_neg_values, '10th': results.loc[0.1], '25th':results.loc[0.25], '50th': results.loc[0.5], '75th': results.loc[0.75], '90th': results.loc[0.9]}
  df = df.append(new_row, ignore_index=True)

df=df.round(2)
df

"""# Table 1 Panel B"""

crsp=pd.read_csv(filepath + "crsp_bv.csv" )
crsp['date']=pd.to_datetime(crsp['date'])
crsp=crsp[crsp['book_value']>0]
# Define the lower and upper bounds
ceq = crsp['ceq']
lower_lim = -1 * ceq
upper_lim = 2* ceq

# Filter the DataFrame
crsp_filtered = crsp[((crsp['cc'].isna()) | ((crsp['cc'] >= lower_lim) & (crsp['cc'] <= upper_lim))) &
                     ((crsp['re'].isna()) | ((crsp['re'] >= lower_lim) & (crsp['re'] <= upper_lim))) &
                     ((crsp['acominc'].isna()) | ((crsp['acominc'] >= lower_lim) & (crsp['acominc'] <= upper_lim)))]

crsp=crsp_filtered

crsp

"""Fama French Size Sort"""

crsp['date']=pd.to_datetime(crsp['date'])
sb=crsp[(crsp['date'].dt.month==6) & (crsp['exchange']=="NYSE")]
sb.to_sql('sb', conn, if_exists='replace')

query='''
        SELECT DISTINCT permno, reference_date, mkt_cap as ff_mkt_equity
        FROM sb
        '''

sb=pd.read_sql(query, conn)

#get median market equity for nyse
sb['median_mkt_cap'] = sb.groupby('reference_date')['ff_mkt_equity'].transform('median')

sb.to_sql('sb', conn, if_exists='replace')

query='''
        SELECT DISTINCT reference_date, median_mkt_cap
        FROM SB
        '''
sb=pd.read_sql(query, conn)

crsp.to_sql('crsp', conn, if_exists='replace')
sb.to_sql('sb', conn, if_exists='replace')

query='''
        SELECT DISTINCT crsp.*, sb.median_mkt_cap
        FROM crsp
        LEFT JOIN sb
        ON crsp.reference_date=sb.reference_date
        '''
crsp_sb=pd.read_sql(query, conn)
crsp=crsp_sb
crsp.dropna(subset=['median_mkt_cap'], inplace=True)

crsp['size_portfolio']=np.where(crsp['market_equity']>crsp['median_mkt_cap'], "B", "S")

crsp

"""Fama French B/M Sort"""

crsp['date']=pd.to_datetime(crsp['date'])
bb=crsp[crsp['exchange']=="NYSE"]
bb.drop('level_0', axis=1, inplace=True)
bb.to_sql('bb', conn, if_exists='replace')

query='''
        SELECT DISTINCT permno, reference_date, book_to_market
        FROM bb
        '''

bb=pd.read_sql(query, conn)


bb['bv_30'] = bb.groupby('reference_date')['book_to_market'].transform(lambda x: x.quantile(0.3))
bb['bv_70'] = bb.groupby('reference_date')['book_to_market'].transform(lambda x: x.quantile(0.7))

bb.to_sql('bb', conn, if_exists='replace')

query='''
        SELECT DISTINCT reference_date, bv_30, bv_70
        FROM bb
        '''
bb=pd.read_sql(query, conn)

crsp.drop(['level_0', 'Unnamed: 0', 'index'], axis=1, inplace=True)
crsp.to_sql('crsp', conn, if_exists='replace')
bb.to_sql('bb', conn, if_exists='replace')

query='''
        SELECT DISTINCT crsp.*, bb.bv_30, bb.bv_70
        FROM crsp
        LEFT JOIN bb
        ON crsp.reference_date=bb.reference_date
        '''
crsp_bb=pd.read_sql(query, conn)

crsp=crsp_bb

crsp['b/m_portfolio'] = np.where(crsp['book_to_market'] < crsp['bv_30'], 'growth',
                               np.where(crsp['book_to_market'] > crsp['bv_70'], 'value', 'neutral'))

crsp=crsp[("1964-07-01"<=crsp['date']) & (crsp['date']< "2018-01-01")]

df = pd.DataFrame(columns=['Size', 'B/M', 'Mean', 'Median', 'PCT<0'])

for x in ["S", "B"]:
  for j in ['growth', 'neutral', 'value']:
    crsp_temp=crsp[(crsp['size_portfolio']==x) & (crsp['b/m_portfolio']==j)]
    mean=crsp_temp['re/b'].mean()
    median=crsp_temp['re/b'].median()

    #calculate percentage of values <0
    num_neg_values = (crsp_temp['re/b'] < 0).sum()
    percent_neg_values = num_neg_values /len(crsp_temp) * 100

    new_row = {'Size': x, 'B/M': j, 'Mean': mean, 'Median': median, 'PCT<0':percent_neg_values}
    df = df.append(new_row, ignore_index=True)

re_be=df.round(2)
re_be

df = pd.DataFrame(columns=['Size', 'B/M', 'Mean', 'Median', 'PCT<0'])

for x in ["S", "B"]:
  for j in ['growth', 'neutral', 'value']:
    crsp_temp=crsp[(crsp['size_portfolio']==x) & (crsp['b/m_portfolio']==j)]
    mean=crsp_temp['cc/b'].mean()
    median=crsp_temp['cc/b'].median()

    #calculate percentage of values <0
    num_neg_values = (crsp_temp['cc/b'] < 0).sum()
    percent_neg_values = num_neg_values /len(crsp_temp) * 100

    new_row = {'Size': x, 'B/M': j, 'Mean': mean, 'Median': median, 'PCT<0':percent_neg_values}
    df = df.append(new_row, ignore_index=True)
cc_be=df.round(2)

df = pd.DataFrame(columns=['Size', 'B/M', 'Mean', 'Median', 'PCT<0'])

for x in ["S", "B"]:
  for j in ['growth', 'neutral', 'value']:
    crsp_temp=crsp[(crsp['size_portfolio']==x) & (crsp['b/m_portfolio']==j)]
    mean=crsp_temp['other/b'].mean()
    median=crsp_temp['other/b'].median()

    #calculate percentage of values <0
    num_neg_values = (crsp_temp['other/b'] < 0).sum()
    percent_neg_values = num_neg_values /len(crsp_temp) * 100

    new_row = {'Size': x, 'B/M': j, 'Mean': mean, 'Median': median, 'PCT<0':percent_neg_values}
    df = df.append(new_row, ignore_index=True)
aoci_be=df.round(2)
aoci_be

"""# Table 2 Fama McBeth Regressions

First exclude microcaps from the sample, securities below the NYSE 20% Market Cap Quantile.
"""

filepath="/content/gdrive/MyDrive/B_M/"
crsp=pd.read_csv(filepath + "crsp_bv.csv" )

crsp['date']=pd.to_datetime(crsp['date'])
sb=crsp[(crsp['date'].dt.month==6) & (crsp['exchange']=="NYSE")]
sb.to_sql('sb', conn, if_exists='replace')

query='''
        SELECT DISTINCT permno, reference_date, mkt_cap as ff_mkt_equity
        FROM sb
        '''

sb=pd.read_sql(query, conn)

#get 20% quantile of market equity for NYSE
sb['microcap_mkt_cap'] = sb.groupby('reference_date')['ff_mkt_equity'].transform(lambda x: x.quantile(0.2))

sb.to_sql('sb', conn, if_exists='replace')

query='''
        SELECT DISTINCT reference_date, microcap_mkt_cap
        FROM SB
        '''
sb=pd.read_sql(query, conn)

crsp.to_sql('crsp', conn, if_exists='replace')
sb.to_sql('sb', conn, if_exists='replace')

query='''
        SELECT DISTINCT crsp.*, sb.microcap_mkt_cap
        FROM crsp
        LEFT JOIN sb
        ON crsp.reference_date=sb.reference_date
        '''
crsp_sb=pd.read_sql(query, conn)
crsp=crsp_sb


#Drop microcaps
crsp = crsp[crsp['market_equity'] >= crsp['microcap_mkt_cap']]

filepath="/content/gdrive/MyDrive/B_M/"
crsp=pd.read_csv(filepath + "crsp_bv.csv" )

crsp['ret_adj']

"""Generate prior year return skipping one month"""

for x in range(2,13):
  crsp[f'return_t-{x}']/=100
  crsp[f'return_t-{x}']+=1

crsp['return_t-2_t-12'] = np.cumprod(crsp.loc[:, 'return_t-2':'return_t-12'], axis=1).iloc[:, -1]

# Subtract 1 and convert the result back to percentage returns
crsp['return_t-2_t-12'] = (crsp['return_t-2_t-12'] - 1) * 100

"""Sample Period: 1964-2017"""

#crsp.drop (['level_0', 'Unnamed: 0', 'Unnamed: 0.1'	], axis=1, inplace=True)
#crsp.drop(['level_0', 'Unnamed: 0', 'Unnamed: 0.1'], axis=1, inplace=True)
crsp['date']=pd.to_datetime(crsp['date'])
crsp=crsp[("1964-07-01"<=crsp['date']) & (crsp['date']< "2018-01-01")]

crsp['tstk'] = crsp['tstk'].fillna(0)
crsp['cc']=crsp['cstk']+crsp['caps']-crsp['tstk']

"""Trim variables at 1% and 99%"""

'''
for x in ['market_equity', 'book_to_market', 'reported_book_to_market', 'return_t-1', 'return_t-2_t-12']:
    # Calculate the 1st and 99th percentiles
    p1 = crsp[x].quantile(0.01)
    p99 = crsp[x].quantile(0.99)

    # Drop observations outside of the 1st and 99th percentiles
    crsp = crsp[(crsp[x] >= p1) & (crsp[x] <= p99)]
'''

crsp_c=crsp.copy()

#positive book value of equity
#crsp = crsp[crsp['book_value'] >= 0]

#non-missing re and cc
crsp = crsp.dropna(subset=['re', 'cc'])

#Construct Book Value Componenents Scaled by Market Equity
crsp['book_to_market']=crsp['book_value']/crsp['market_equity']
crsp['reported_book_to_market']=crsp['ceq']/crsp['market_equity']
crsp['contributed_capital_to_market']=crsp['cc']/crsp['market_equity']
crsp['retained_earnings_to_market']=crsp['re']/crsp['market_equity']
crsp['other_book_to_market']=crsp['acominc']/crsp['market_equity']

#Construct Book Value Components Scaled by Book Value of Equity
crsp['re/b']=crsp['re']/crsp['ceq']
crsp['cc/b']=crsp['cc']/crsp['ceq']
crsp['other/b']=crsp['acominc']/crsp['ceq']

#create indicator variables for when components of bv are <0:
for x in ['contributed_capital_to_market', 'retained_earnings_to_market', 'other_book_to_market']:
    # Replace negative values with 0
    #crsp[x] = crsp[x].clip(lower=0)

    # Create an indicator column which is 1 when the values are negative
    crsp[f'{x}_neg'] = (crsp[x] < 0).astype(int)


    # Apply the function to create a new column 'new_col'


#create log of variables
for x in ['market_equity', 'book_to_market', 'reported_book_to_market', 'contributed_capital_to_market', 'retained_earnings_to_market', 'other_book_to_market']:
    # Create a new log variable
    crsp[x+'_log'] = np.log(crsp[x])
    crsp[x+'_log'] = crsp[x+'_log'].replace([-np.inf, np.inf, np.nan], 0)

crsp['ret_adj']/=100
crsp['return_t-1']/=100
#crsp['return_t-2_t-12']/=100

"""# 2A"""

#build regression dataframe

a = pd.DataFrame({'regressor': ['log(me)', 'R1', 'R12', 'log(be/me)', 'log(re/me)', 'log(cc/me)', 'log(aoci/me)', 'RE<0', 'CC<0', 'AOCI<0', 'Average ADJ R2']})
a

#build regression dataframe

a = pd.DataFrame({'regressor': ['log(me)', 'R1', 'R12', 'log(be/me)', 'log(re/me)', 'log(cc/me)', 'log(aoci/me)', 'RE<0', 'CC<0', 'AOCI<0', 'Average ADJ R2']})
a
#build dataframe to store coefficients
df = pd.DataFrame({'DATE':[], 'ME': [], 'R1': [], 'R12': [], 'cc': [], 'I': []})
dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  # Create the design matrix X
  crsp_temp=crsp[crsp['date']==date]
  X = crsp_temp[['market_equity_log','return_t-1', 'return_t-2_t-12', 'book_to_market_log'  ]]
  X = sm.add_constant(X)

  # Create the target vector y
  y = crsp_temp['ret_adj']

  # Create the regression model without a constant
  model = sm.OLS(y, X)

  # Fit the model and print the summary
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  #print(params)
  new_row = {'Date': date, 'ME': params[1]*100, 'R1': params[2]*100, 'R12': params[3]*100, 'BM':params[4]*100, 'r2':adj_r2*100}
  df = df.append(new_row, ignore_index=True)
  print(date)

a.loc[a['regressor'] == 'log(me)', '(1)'] = "{:.2f} ({:.2f})".format(df['ME'].mean(), df['ME'].mean()/(df['ME'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'R1', '(1)'] = "{:.2f} ({:.2f})".format(df['R1'].mean(), df['R1'].mean()/(df['R1'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'R12', '(1)'] = "{:.2f} ({:.2f})".format(df['R12'].mean(), df['R12'].mean()/(df['R12'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'log(be/me)', '(1)'] = "{:.2f} ({:.2f})".format(df['BM'].mean(), df['BM'].mean()/(df['BM'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'Average ADJ R2', '(1)'] = df['r2'].mean()

#build dataframe to store coefficients
df = pd.DataFrame({'DATE':[], 'ME': [], 'R1': [], 'R12': [], 'cc': [], 'I': []})
dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  # Create the design matrix X
  crsp_temp=crsp[crsp['date']==date]
  X = crsp_temp[['market_equity_log','return_t-1', 'return_t-2_t-12',  'retained_earnings_to_market_log', 'retained_earnings_to_market_neg'  ]]
  X = sm.add_constant(X)

  # Create the target vector y
  y = crsp_temp['ret_adj']

  # Create the regression model without a constant
  model = sm.OLS(y, X)

  # Fit the model and print the summary
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  #print(params)
  new_row = {'Date': date, 'ME': params[1]*100, 'R1': params[2]*100, 'R12': params[3]*100, 'RE':params[4]*100, 'I':params[5]*100, 'r2':adj_r2*100}
  df = df.append(new_row, ignore_index=True)
  print(date)

a.loc[a['regressor'] == 'log(me)', '(2)'] = "{:.2f} ({:.2f})".format(df['ME'].mean(), df['ME'].mean()/(df['ME'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'R1', '(2)'] = "{:.2f} ({:.2f})".format(df['R1'].mean(), df['R1'].mean()/(df['R1'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'R12', '(2)'] = "{:.2f} ({:.2f})".format(df['R12'].mean(), df['R12'].mean()/(df['R12'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'log(re/me)', '(2)'] = "{:.2f} ({:.2f})".format(df['RE'].mean(), df['RE'].mean()/(df['RE'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'RE<0', '(2)'] = "{:.2f} ({:.2f})".format(df['I'].mean(), df['I'].mean()/(df['I'].std()/np.sqrt(len(df))))

a.loc[a['regressor'] == 'Average ADJ R2', '(2)'] = df['r2'].mean()

#build dataframe to store coefficients
df = pd.DataFrame({'DATE':[], 'ME': [], 'R1': [], 'R12': [], 'cc': [], 'I': []})
dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  # Create the design matrix X
  crsp_temp=crsp[crsp['date']==date]
  X = crsp_temp[['market_equity_log','return_t-1', 'return_t-2_t-12', 'book_to_market_log', 'retained_earnings_to_market_log', 'retained_earnings_to_market_neg'  ]]
  X = sm.add_constant(X)

  # Create the target vector y
  y = crsp_temp['ret_adj']

  # Create the regression model without a constant
  model = sm.OLS(y, X)

  # Fit the model and print the summary
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  #print(params)
  new_row = {'Date': date, 'ME': params[1]*100, 'R1': params[2]*100, 'R12': params[3]*100, 'BM':params[4]*100, 'RE':params[5]*100, 'I':params[6]*100, 'r2':adj_r2*100}
  df = df.append(new_row, ignore_index=True)
  print(date)

a.loc[a['regressor'] == 'log(me)', '(3)'] = "{:.2f} ({:.2f})".format(df['ME'].mean(), df['ME'].mean()/(df['ME'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'R1', '(3)'] = "{:.2f} ({:.2f})".format(df['R1'].mean(), df['R1'].mean()/(df['R1'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'R12', '(3)'] = "{:.2f} ({:.2f})".format(df['R12'].mean(), df['R12'].mean()/(df['R12'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'log(be/me)', '(3)'] = "{:.2f} ({:.2f})".format(df['BM'].mean(), df['BM'].mean()/(df['BM'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'log(re/me)', '(3)'] = "{:.2f} ({:.2f})".format(df['RE'].mean(), df['RE'].mean()/(df['RE'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'RE<0', '(3)'] = "{:.2f} ({:.2f})".format(df['I'].mean(), df['I'].mean()/(df['I'].std()/np.sqrt(len(df))))

a.loc[a['regressor'] == 'Average ADJ R2', '(3)'] = df['r2'].mean()

#build dataframe to store coefficients
df = pd.DataFrame({'DATE':[], 'ME': [], 'R1': [], 'R12': [], 'cc': [], 'I': []})
dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  # Create the design matrix X
  crsp_temp=crsp[crsp['date']==date]
  X = crsp_temp[['market_equity_log','return_t-1', 'return_t-2_t-12', 'contributed_capital_to_market_log', 'contributed_capital_to_market_neg']]
  X = sm.add_constant(X)

  # Create the target vector y
  y = crsp_temp['ret_adj']

  # Create the regression model without a constant
  model = sm.OLS(y, X)

  # Fit the model and print the summary
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  #print(params)
  new_row = {'Date': date, 'ME': params[1]*100, 'R1': params[2]*100, 'R12': params[3]*100, 'CC':params[4]*100, 'i':params[5]*100, 'r2':adj_r2*100}
  df = df.append(new_row, ignore_index=True)
  print(date)

a.loc[a['regressor'] == 'log(me)', '(4)'] = "{:.2f} ({:.2f})".format(df['ME'].mean(), df['ME'].mean()/(df['ME'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'R1', '(4)'] = "{:.2f} ({:.2f})".format(df['R1'].mean(), df['R1'].mean()/(df['R1'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'R12', '(4)'] = "{:.2f} ({:.2f})".format(df['R12'].mean(), df['R12'].mean()/(df['R12'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'log(cc/me)', '(4)'] = "{:.2f} ({:.2f})".format(df['CC'].mean(), df['CC'].mean()/(df['CC'].std()/np.sqrt(len(df))))

a.loc[a['regressor'] == 'CC<0', '(4)'] = "{:.2f} ({:.2f})".format(df['i'].mean(), df['i'].mean()/(df['i'].std()/np.sqrt(len(df))))

a.loc[a['regressor'] == 'Average ADJ R2', '(4)'] = df['r2'].mean()

#build dataframe to store coefficients
df = pd.DataFrame({'DATE':[], 'ME': [], 'R1': [], 'R12': [], 'cc': [], 'I': []})
dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  # Create the design matrix X
  crsp_temp=crsp[crsp['date']==date]
  X = crsp_temp[['market_equity_log','return_t-1', 'return_t-2_t-12', 'contributed_capital_to_market_log', 'contributed_capital_to_market_neg', 'book_to_market_log']]
  X = sm.add_constant(X)

  # Create the target vector y
  y = crsp_temp['ret_adj']

  # Create the regression model without a constant
  model = sm.OLS(y, X)

  # Fit the model and print the summary
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  #print(params)
  new_row = {'Date': date, 'ME': params[1]*100, 'R1': params[2]*100, 'R12': params[3]*100, 'CC':params[4]*100, 'i':params[5]*100, 'BM':params[6]*100, 'r2':adj_r2*100}
  df = df.append(new_row, ignore_index=True)
  print(date)

a.loc[a['regressor'] == 'log(me)', '(5)'] = "{:.2f} ({:.2f})".format(df['ME'].mean(), df['ME'].mean()/(df['ME'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'R1', '(5)'] = "{:.2f} ({:.2f})".format(df['R1'].mean(), df['R1'].mean()/(df['R1'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'R12', '(5)'] = "{:.2f} ({:.2f})".format(df['R12'].mean(), df['R12'].mean()/(df['R12'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'log(cc/me)', '(5)'] = "{:.2f} ({:.2f})".format(df['CC'].mean(), df['CC'].mean()/(df['CC'].std()/np.sqrt(len(df))))

a.loc[a['regressor'] == 'CC<0', '(5)'] = "{:.2f} ({:.2f})".format(df['i'].mean(), df['i'].mean()/(df['i'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'log(be/me)', '(5)'] = "{:.2f} ({:.2f})".format(df['BM'].mean(), df['BM'].mean()/(df['BM'].std()/np.sqrt(len(df))))

a.loc[a['regressor'] == 'Average ADJ R2', '(5)'] = df['r2'].mean()

#build dataframe to store coefficients
df = pd.DataFrame({'DATE':[], 'ME': [], 'R1': [], 'R12': [], 'cc': [], 'I': []})
dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  # Create the design matrix X
  crsp_temp=crsp[crsp['date']==date]
  X = crsp_temp[['market_equity_log','return_t-1', 'return_t-2_t-12', 'other_book_to_market_log', 'other_book_to_market_neg'  ]]
  X = sm.add_constant(X)

  # Create the target vector y
  y = crsp_temp['ret_adj']

  # Create the regression model without a constant
  model = sm.OLS(y, X)

  # Fit the model and print the summary
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  #print(params)
  new_row = {'Date': date, 'ME': params[1]*100, 'R1': params[2]*100, 'R12': params[3]*100, 'O':params[4]*100, 'I':params[5]*100, 'r2':adj_r2*100}
  df = df.append(new_row, ignore_index=True)
  print(date)

a.loc[a['regressor'] == 'log(me)', '(6)'] = "{:.2f} ({:.2f})".format(df['ME'].mean(), df['ME'].mean()/(df['ME'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'R1', '(6)'] = "{:.2f} ({:.2f})".format(df['R1'].mean(), df['R1'].mean()/(df['R1'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'R12', '(6)'] = "{:.2f} ({:.2f})".format(df['R12'].mean(), df['R12'].mean()/(df['R12'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'log(aoci/me)', '(6)'] = "{:.2f} ({:.2f})".format(df['O'].mean(), df['O'].mean()/(df['O'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'AOCI<0', '(6)'] = "{:.2f} ({:.2f})".format(df['I'].mean(), df['I'].mean()/(df['I'].std()/np.sqrt(len(df))))

a.loc[a['regressor'] == 'Average ADJ R2', '(6)'] = df['r2'].mean()

#build dataframe to store coefficients
df = pd.DataFrame({'DATE':[], 'ME': [], 'R1': [], 'R12': [], 'cc': [], 'I': []})
dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  # Create the design matrix X
  crsp_temp=crsp[crsp['date']==date]
  X = crsp_temp[['market_equity_log','return_t-1', 'return_t-2_t-12', 'other_book_to_market_log', 'other_book_to_market_neg', 'book_to_market_log'  ]]
  X = sm.add_constant(X)

  # Create the target vector y
  y = crsp_temp['ret_adj']

  # Create the regression model without a constant
  model = sm.OLS(y, X)

  # Fit the model and print the summary
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  #print(params)
  new_row = {'Date': date, 'ME': params[1]*100, 'R1': params[2]*100, 'R12': params[3]*100, 'O':params[4]*100, 'I':params[5]*100, 'BM':params[6]*100, 'r2':adj_r2*100}
  df = df.append(new_row, ignore_index=True)
  print(date)

a.loc[a['regressor'] == 'log(me)', '(7)'] = "{:.2f} ({:.2f})".format(df['ME'].mean(), df['ME'].mean()/(df['ME'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'R1', '(7)'] = "{:.2f} ({:.2f})".format(df['R1'].mean(), df['R1'].mean()/(df['R1'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'R12', '(7)'] = "{:.2f} ({:.2f})".format(df['R12'].mean(), df['R12'].mean()/(df['R12'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'log(aoci/me)', '(7)'] = "{:.2f} ({:.2f})".format(df['O'].mean(), df['O'].mean()/(df['O'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'log(be/me)', '(7)'] = "{:.2f} ({:.2f})".format(df['BM'].mean(), df['BM'].mean()/(df['BM'].std()/np.sqrt(len(df))))

a.loc[a['regressor'] == 'AOCI<0', '(7)'] = "{:.2f} ({:.2f})".format(df['I'].mean(), df['I'].mean()/(df['I'].std()/np.sqrt(len(df))))

a.loc[a['regressor'] == 'Average ADJ R2', '(7)'] = df['r2'].mean()

#build dataframe to store coefficients
df = pd.DataFrame({'DATE':[], 'ME': [], 'R1': [], 'R12': [], 'cc': [], 'I': []})
dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  # Create the design matrix X
  crsp_temp=crsp[crsp['date']==date]
  X = crsp_temp[['market_equity_log','return_t-1', 'return_t-2_t-12', 'other_book_to_market_log', 'other_book_to_market_neg', 'retained_earnings_to_market_log', 'retained_earnings_to_market_neg', 'contributed_capital_to_market_log', 'contributed_capital_to_market_neg'  ]]
  X = sm.add_constant(X)

  # Create the target vector y
  y = crsp_temp['ret_adj']

  # Create the regression model without a constant
  model = sm.OLS(y, X)

  # Fit the model and print the summary
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  #print(params)
  new_row = {'Date': date, 'ME': params[1]*100, 'R1': params[2]*100, 'R12': params[3]*100, 'O':params[4]*100, 'I':params[5]*100, 'RE':params[6]*100, 'RI':params[7]*100, 'CC':params[8]*100, 'CI':params[9], 'r2':adj_r2*100}
  df = df.append(new_row, ignore_index=True)
  print(date)

a.loc[a['regressor'] == 'log(me)', '(8)'] = "{:.2f} ({:.2f})".format(df['ME'].mean(), df['ME'].mean()/(df['ME'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'R1', '(8)'] = "{:.2f} ({:.2f})".format(df['R1'].mean(), df['R1'].mean()/(df['R1'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'R12', '(8)'] = "{:.2f} ({:.2f})".format(df['R12'].mean(), df['R12'].mean()/(df['R12'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'log(aoci/me)', '(8)'] = "{:.2f} ({:.2f})".format(df['O'].mean(), df['O'].mean()/(df['O'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'log(re/me)', '(8)'] = "{:.2f} ({:.2f})".format(df['RE'].mean(), df['RE'].mean()/(df['RE'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'RE<0', '(8)'] = "{:.2f} ({:.2f})".format(df['RI'].mean(), df['RI'].mean()/(df['RI'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'loc(cc/me)', '(8)'] = "{:.2f} ({:.2f})".format(df['CC'].mean(), df['CC'].mean()/(df['CC'].std()/np.sqrt(len(df))))

a.loc[a['regressor'] == 'CC<0', '(8)'] = "{:.2f} ({:.2f})".format(df['CI'].mean(), df['CI'].mean()/(df['CI'].std()/np.sqrt(len(df))))

a.loc[a['regressor'] == 'AOCI<0', '(8)'] = "{:.2f} ({:.2f})".format(df['I'].mean(), df['I'].mean()/(df['I'].std()/np.sqrt(len(df))))

a.loc[a['regressor'] == 'Average ADJ R2', '(8)'] = df['r2'].mean()

a.fillna('-', inplace=True)
a.set_index('regressor', inplace=True)
table2_a=a
table2_a

"""# 2B"""

#build regression dataframe

a = pd.DataFrame({'regressor': ['log(me)', 'R1', 'R12', 'log(Reported BE/ME)', 'log(re/me)', 'log(cc/me)', 'log(aoci/me)', 'RE<0', 'CC<0', 'AOCI<0', 'Average ADJ R2']})
a
#build dataframe to store coefficients
df = pd.DataFrame({'DATE':[], 'ME': [], 'R1': [], 'R12': [], 'cc': [], 'I': []})
dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  # Create the design matrix X
  crsp_temp=crsp[crsp['date']==date]
  X = crsp_temp[['market_equity_log','return_t-1', 'return_t-2_t-12', 'reported_book_to_market_log'  ]]
  X = sm.add_constant(X)

  # Create the target vector y
  y = crsp_temp['ret_adj']

  # Create the regression model without a constant
  model = sm.OLS(y, X)

  # Fit the model and print the summary
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  #print(params)
  new_row = {'Date': date, 'ME': params[1]*100, 'R1': params[2]*100, 'R12': params[3]*100, 'BM':params[4]*100, 'r2':adj_r2*100}
  df = df.append(new_row, ignore_index=True)
  print(date)

a.loc[a['regressor'] == 'log(me)', '(1)'] = "{:.2f} ({:.2f})".format(df['ME'].mean(), df['ME'].mean()/(df['ME'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'R1', '(1)'] = "{:.2f} ({:.2f})".format(df['R1'].mean(), df['R1'].mean()/(df['R1'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'R12', '(1)'] = "{:.2f} ({:.2f})".format(df['R12'].mean(), df['R12'].mean()/(df['R12'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'log(Reported BE/ME)', '(1)'] = "{:.2f} ({:.2f})".format(df['BM'].mean(), df['BM'].mean()/(df['BM'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'Average ADJ R2', '(1)'] = df['r2'].mean()

#build dataframe to store coefficients
df = pd.DataFrame({'DATE':[], 'ME': [], 'R1': [], 'R12': [], 'cc': [], 'I': []})
dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  # Create the design matrix X
  crsp_temp=crsp[crsp['date']==date]
  X = crsp_temp[['market_equity_log','return_t-1', 'return_t-2_t-12', 'reported_book_to_market_log', 'retained_earnings_to_market_log', 'retained_earnings_to_market_neg'  ]]
  X = sm.add_constant(X)

  # Create the target vector y
  y = crsp_temp['ret_adj']

  # Create the regression model without a constant
  model = sm.OLS(y, X)

  # Fit the model and print the summary
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  #print(params)
  new_row = {'Date': date, 'ME': params[1]*100, 'R1': params[2]*100, 'R12': params[3]*100, 'BM':params[4]*100, 'RE':params[5]*100, 'I':params[6]*100, 'r2':adj_r2*100}
  df = df.append(new_row, ignore_index=True)
  print(date)

a.loc[a['regressor'] == 'log(me)', '(2)'] = "{:.2f} ({:.2f})".format(df['ME'].mean(), df['ME'].mean()/(df['ME'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'R1', '(2)'] = "{:.2f} ({:.2f})".format(df['R1'].mean(), df['R1'].mean()/(df['R1'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'R12', '(2)'] = "{:.2f} ({:.2f})".format(df['R12'].mean(), df['R12'].mean()/(df['R12'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'log(Reported BE/ME)', '(2)'] = "{:.2f} ({:.2f})".format(df['BM'].mean(), df['BM'].mean()/(df['BM'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'log(re/me)', '(2)'] = "{:.2f} ({:.2f})".format(df['RE'].mean(), df['RE'].mean()/(df['RE'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'RE<0', '(2)'] = "{:.2f} ({:.2f})".format(df['I'].mean(), df['I'].mean()/(df['I'].std()/np.sqrt(len(df))))

a.loc[a['regressor'] == 'Average ADJ R2', '(2)'] = df['r2'].mean()

#build dataframe to store coefficients
df = pd.DataFrame({'DATE':[], 'ME': [], 'R1': [], 'R12': [], 'cc': [], 'I': []})
dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  # Create the design matrix X
  crsp_temp=crsp[crsp['date']==date]
  X = crsp_temp[['market_equity_log','return_t-1', 'return_t-2_t-12', 'contributed_capital_to_market_log', 'contributed_capital_to_market_neg', 'reported_book_to_market_log']]
  X = sm.add_constant(X)

  # Create the target vector y
  y = crsp_temp['ret_adj']

  # Create the regression model without a constant
  model = sm.OLS(y, X)

  # Fit the model and print the summary
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  #print(params)
  new_row = {'Date': date, 'ME': params[1]*100, 'R1': params[2]*100, 'R12': params[3]*100, 'CC':params[4]*100, 'i':params[5]*100, 'BM':params[6]*100, 'r2':adj_r2*100}
  df = df.append(new_row, ignore_index=True)
  print(date)

a.loc[a['regressor'] == 'log(me)', '(5)'] = "{:.2f} ({:.2f})".format(df['ME'].mean(), df['ME'].mean()/(df['ME'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'R1', '(5)'] = "{:.2f} ({:.2f})".format(df['R1'].mean(), df['R1'].mean()/(df['R1'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'R12', '(5)'] = "{:.2f} ({:.2f})".format(df['R12'].mean(), df['R12'].mean()/(df['R12'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'log(cc/me)', '(5)'] = "{:.2f} ({:.2f})".format(df['CC'].mean(), df['CC'].mean()/(df['CC'].std()/np.sqrt(len(df))))

a.loc[a['regressor'] == 'CC<0', '(5)'] = "{:.2f} ({:.2f})".format(df['i'].mean(), df['i'].mean()/(df['i'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'log(Reported BE/ME)', '(5)'] = "{:.2f} ({:.2f})".format(df['BM'].mean(), df['BM'].mean()/(df['BM'].std()/np.sqrt(len(df))))

a.loc[a['regressor'] == 'Average ADJ R2', '(5)'] = df['r2'].mean()

#build dataframe to store coefficients
df = pd.DataFrame({'DATE':[], 'ME': [], 'R1': [], 'R12': [], 'cc': [], 'I': []})
dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  # Create the design matrix X
  crsp_temp=crsp[crsp['date']==date]
  X = crsp_temp[['market_equity_log','return_t-1', 'return_t-2_t-12', 'other_book_to_market_log', 'other_book_to_market_neg', 'reported_book_to_market_log'  ]]
  X = sm.add_constant(X)

  # Create the target vector y
  y = crsp_temp['ret_adj']

  # Create the regression model without a constant
  model = sm.OLS(y, X)

  # Fit the model and print the summary
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  #print(params)
  new_row = {'Date': date, 'ME': params[1]*100, 'R1': params[2]*100, 'R12': params[3]*100, 'O':params[4]*100, 'I':params[5]*100, 'BM':params[6]*100, 'r2':adj_r2*100}
  df = df.append(new_row, ignore_index=True)
  print(date)

a.loc[a['regressor'] == 'log(me)', '(4)'] = "{:.2f} ({:.2f})".format(df['ME'].mean(), df['ME'].mean()/(df['ME'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'R1', '(4)'] = "{:.2f} ({:.2f})".format(df['R1'].mean(), df['R1'].mean()/(df['R1'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'R12', '(4)'] = "{:.2f} ({:.2f})".format(df['R12'].mean(), df['R12'].mean()/(df['R12'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'log(aoci/me)', '(4)'] = "{:.2f} ({:.2f})".format(df['O'].mean(), df['O'].mean()/(df['O'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'log(Reported BE/ME)', '(4)'] = "{:.2f} ({:.2f})".format(df['BM'].mean(), df['BM'].mean()/(df['BM'].std()/np.sqrt(len(df))))

a.loc[a['regressor'] == 'AOCI<0', '(4)'] = "{:.2f} ({:.2f})".format(df['I'].mean(), df['I'].mean()/(df['I'].std()/np.sqrt(len(df))))

a.loc[a['regressor'] == 'Average ADJ R2', '(4)'] = df['r2'].mean()

a.fillna('-', inplace=True)
a.set_index('regressor', inplace=True)
table2_b=a
table2_b

"""# 2C"""

crsp=crsp_c
for x in ['contributed_capital_to_market', 'retained_earnings_to_market', 'other_book_to_market', 'book_value']:
    # Replace negative values with 0
    #crsp[x] = crsp[x].clip(lower=0)

    # Create an indicator column which is 1 when the values are negative
    crsp[f'{x}_neg'] = (crsp[x] < 0).astype(int)

#non-missing re and cc
crsp = crsp.dropna(subset=['re', 'cc'])

#Construct Book Value Componenents Scaled by Market Equity
crsp['book_to_market']=crsp['book_value']/crsp['market_equity']
crsp['reported_book_to_market']=crsp['ceq']/crsp['market_equity']
crsp['contributed_capital_to_market']=crsp['cc']/crsp['market_equity']
crsp['retained_earnings_to_market']=crsp['re']/crsp['market_equity']
crsp['other_book_to_market']=crsp['acominc']/crsp['market_equity']

#Construct Book Value Components Scaled by Book Value of Equity
crsp['re/b']=crsp['re']/crsp['ceq']
crsp['cc/b']=crsp['cc']/crsp['ceq']
crsp['other/b']=crsp['acominc']/crsp['ceq']



#create log of variables
for x in ['market_equity', 'book_to_market', 'reported_book_to_market', 'contributed_capital_to_market', 'retained_earnings_to_market', 'other_book_to_market']:
    # Create a new log variable
    crsp[x+'_log'] = np.log(crsp[x])
    crsp[x+'_log'] = crsp[x+'_log'].replace([-np.inf, np.inf, np.nan], 0)


crsp['ret_adj']/=100
crsp['return_t-1']/=100
crsp['return_t-2_t-12']/=100

#build regression dataframe

a = pd.DataFrame({'regressor': ['log(me)', 'R1', 'R12', 'log(BE/ME)', 'log(re/me)',  'BE<0',  'RE<0', 'Average ADJ R2']})
a
#build dataframe to store coefficients
df = pd.DataFrame({'DATE':[], 'ME': [], 'R1': [], 'R12': [], 'cc': [], 'I': []})
dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  # Create the design matrix X
  crsp_temp=crsp[crsp['date']==date]
  X = crsp_temp[['market_equity_log','return_t-1', 'return_t-2_t-12', 'book_to_market_log', 'book_value_neg'  ]]
  X = sm.add_constant(X)

  # Create the target vector y
  y = crsp_temp['ret_adj']

  # Create the regression model without a constant
  model = sm.OLS(y, X)

  # Fit the model and print the summary
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  #print(params)
  new_row = {'Date': date, 'ME': params[1]*100, 'R1': params[2]*100, 'R12': params[3]*100, 'BM':params[4]*100, 'I':params[5]*100, 'r2':adj_r2*100}
  df = df.append(new_row, ignore_index=True)
  print(date)

a.loc[a['regressor'] == 'log(me)', '(1)'] = "{:.2f} ({:.2f})".format(df['ME'].mean(), df['ME'].mean()/(df['ME'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'R1', '(1)'] = "{:.2f} ({:.2f})".format(df['R1'].mean(), df['R1'].mean()/(df['R1'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'R12', '(1)'] = "{:.2f} ({:.2f})".format(df['R12'].mean(), df['R12'].mean()/(df['R12'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'log(BE/ME)', '(1)'] = "{:.2f} ({:.2f})".format(df['BM'].mean(), df['BM'].mean()/(df['BM'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'BE<0', '(1)'] = "{:.2f} ({:.2f})".format(df['I'].mean(), df['I'].mean()/(df['I'].std()/np.sqrt(len(df))))

a.loc[a['regressor'] == 'Average ADJ R2', '(1)'] = df['r2'].mean()

#build dataframe to store coefficients
df = pd.DataFrame({'DATE':[], 'ME': [], 'R1': [], 'R12': [], 'cc': [], 'I': []})
dates=crsp['date'].unique()
import statsmodels.api as sm

for date in dates:

  # Create the design matrix X
  crsp_temp=crsp[crsp['date']==date]
  X = crsp_temp[['market_equity_log','return_t-1', 'return_t-2_t-12', 'reported_book_to_market_log', 'retained_earnings_to_market_log', 'retained_earnings_to_market_neg', 'book_value_neg'  ]]
  X = sm.add_constant(X)

  # Create the target vector y
  y = crsp_temp['ret_adj']

  # Create the regression model without a constant
  model = sm.OLS(y, X)

  # Fit the model and print the summary
  results = model.fit()
  params = results.params
  adj_r2 = results.rsquared_adj

  #print(params)
  new_row = {'Date': date, 'ME': params[1]*100, 'R1': params[2]*100, 'R12': params[3]*100, 'BM':params[4]*100, 'RE':params[5]*100, 'I':params[6]*100, 'I2':params[7]*100,  'r2':adj_r2*100}
  df = df.append(new_row, ignore_index=True)
  print(date)

a.loc[a['regressor'] == 'log(me)', '(2)'] = "{:.2f} ({:.2f})".format(df['ME'].mean(), df['ME'].mean()/(df['ME'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'R1', '(2)'] = "{:.2f} ({:.2f})".format(df['R1'].mean(), df['R1'].mean()/(df['R1'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'R12', '(2)'] = "{:.2f} ({:.2f})".format(df['R12'].mean(), df['R12'].mean()/(df['R12'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'log(Reported BE/ME)', '(2)'] = "{:.2f} ({:.2f})".format(df['BM'].mean(), df['BM'].mean()/(df['BM'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'log(re/me)', '(2)'] = "{:.2f} ({:.2f})".format(df['RE'].mean(), df['RE'].mean()/(df['RE'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'RE<0', '(2)'] = "{:.2f} ({:.2f})".format(df['I'].mean(), df['I'].mean()/(df['I'].std()/np.sqrt(len(df))))
a.loc[a['regressor'] == 'BE<0', '(2)'] = "{:.2f} ({:.2f})".format(df['I2'].mean(), df['I2'].mean()/(df['I2'].std()/np.sqrt(len(df))))

a.loc[a['regressor'] == 'Average ADJ R2', '(2)'] = df['r2'].mean()

a.fillna('-', inplace=True)
a.set_index('regressor', inplace=True)
table2_c=a
table2_c

"""# Table 3"""

crsp.sort_values(by=['permno', 'date'], inplace=True)

crsp.set_index('date', inplace=True)

crsp['ret_adj']

for x in range(1, 13):
  crsp[f't+{x}']=crsp.groupby('permno')['ret_adj'].shift(-x)

for x in range(1, 13):
  #crsp[f't+{x}']/=100
  #crsp[f't+{x}']+=1
  '''
  #crsp['return_t+2_t+12'] = np.cumprod(crsp.loc[:, 't+1':'t+12'], axis=1).iloc[:, -1]

  # Subtract 1 and convert the result back to percentage returns
  #crsp['return_t+2_t+12'] = (crsp['return_t+2_t+12'] - 1)
  '''

crsp.reset_index(inplace=True)
crsp['date']=pd.to_datetime(crsp['date'])

#get breakpoints for book value

crsp['date']=pd.to_datetime(crsp['date'])
bb=crsp[(crsp['date'].dt.month==6) & (crsp['exchange']=="NYSE")]
bb.to_sql('bb', conn, if_exists='replace')

query='''
        SELECT DISTINCT permno, reference_date, book_to_market as book_to_market
        FROM bb
        '''

bb=pd.read_sql(query, conn)

bb['quintile_1'] = bb.groupby('reference_date')['book_to_market'].transform(lambda x: x.quantile(0.2))
bb['quintile_2'] = bb.groupby('reference_date')['book_to_market'].transform(lambda x: x.quantile(0.4))
bb['quintile_3'] = bb.groupby('reference_date')['book_to_market'].transform(lambda x: x.quantile(0.6))
bb['quintile_4'] = bb.groupby('reference_date')['book_to_market'].transform(lambda x: x.quantile(0.8))

crsp['month']=crsp['date'].dt.month

crsp_june=crsp[crsp['month']==6]

crsp_june

bb.to_sql('bb', conn, if_exists='replace')
query='''
      SELECT DISTINCT reference_date, quintile_1, quintile_2, quintile_3, quintile_4
      FROM bb
          '''

bb=pd.read_sql(query, conn)

bb

crsp_june.to_sql('crsp', conn, if_exists='replace')
bb.to_sql('bb', conn, if_exists='replace')

query='''
        SELECT DISTINCT crsp.*, bb.quintile_1, bb.quintile_2, bb.quintile_3, bb.quintile_4
        FROM crsp
        LEFT JOIN bb
        ON crsp.reference_date=bb.reference_date
        '''

crsp_bb=pd.read_sql(query, conn)

crsp=crsp_bb

# define the quantile columns and the corresponding portfolio numbers
quantile_columns = ['quintile_1', 'quintile_2', 'quintile_3', 'quintile_4']
portfolio_numbers = [1, 2, 3, 4, 5]

# create a new column in crsp that assigns a security to a portfolio based on the quantiles
crsp['portfolio'] = np.where(crsp['book_to_market'] <= crsp[quantile_columns[0]],
                             portfolio_numbers[0],
                             np.where(crsp['book_to_market'] <= crsp[quantile_columns[1]],
                                      portfolio_numbers[1],
                                      np.where(crsp['book_to_market'] <= crsp[quantile_columns[2]],
                                               portfolio_numbers[2],
                                               np.where(crsp['book_to_market'] <= crsp[quantile_columns[3]],
                                                        portfolio_numbers[3],
                                                        portfolio_numbers[4]))))

crsp['market_equity'].isnull().sum()

crsp.sort_values(by='date')

crsp['t+1']

crsp.dropna(subset=['return_t+2_t+12'], inplace=True)

crsp = crsp.dropna(subset=['t+1', 't+2', 't+3', 't+4', 't+5', 't+6', 't+7', 't+8', 't+9', 't+10', 't+11', 't+12'])

def weighted_average(x):
    weights = x['mkt_cap']
    return np.average(x.loc[:, 't+1':'t+12'], weights=weights, axis=0)

# Apply the function to the dataframe, grouping by date and portfolio
result = crsp.groupby(['date', 'portfolio']).apply(weighted_average)

result.to_frame().reset_index()
portfolio_avg_df=result
portfolio_avg_df['weighted_avg'] = portfolio_avg_df[0].apply(lambda x: np.mean(x, axis=1))



result.to_frame().reset_index()

df=result

df=portfolio_avg_df.to_frame().reset_index()

df['average_return'] = df[0].apply(lambda x: np.mean(x, axis=0))

df

returns=df.groupby('portfolio')['average_return'].mean().reset_index()

returns['average_return']*=100

returns

crsp.columns

portfolio_avg = portfolio_avg.to_frame().reset_index()

portfolio_avg

portfolio_returns = portfolio_avg.groupby('portfolio')[0].mean().reset_index()

portfolio_returns



"""# Table 4"""

filepath="/content/gdrive/MyDrive/B_M/"
crsp=pd.read_csv(filepath + "crsp_bv.csv" )

"""Drop firms with missing retained earnings from sample:"""

crsp.dropna(subset=['re'], inplace=True)

"""Drop firms with negative book values (From Fama French Methodology)
Note this is provisional- the authors make no reference to negative book values
"""

negative_book_values = (crsp['ceq'] < 0).sum()
print("Number of values less than 0 in the 'book_value' column:", negative_book_values)
crsp_positive_book_values = crsp[crsp['book_value'] >= 0]
#crsp=crsp_positive_book_values

"""Fama French Size Sort:"""

crsp['date']=pd.to_datetime(crsp['date'])
sb=crsp[(crsp['date'].dt.month==6) & (crsp['exchange']=="NYSE")]
sb.to_sql('sb', conn, if_exists='replace')

query='''
        SELECT DISTINCT permno, reference_date, mkt_cap as ff_mkt_equity
        FROM sb
        '''

sb=pd.read_sql(query, conn)

#get median market equity for nyse
sb['median_mkt_cap'] = sb.groupby('reference_date')['ff_mkt_equity'].transform('median')

sb.to_sql('sb', conn, if_exists='replace')

query='''
        SELECT DISTINCT reference_date, median_mkt_cap
        FROM SB
        '''
sb=pd.read_sql(query, conn)



crsp.to_sql('crsp', conn, if_exists='replace')
sb.to_sql('sb', conn, if_exists='replace')
query='''
        SELECT DISTINCT crsp.*, sb.median_mkt_cap
        FROM crsp
        LEFT JOIN sb
        ON crsp.reference_date=sb.reference_date
        '''
crsp_sb=pd.read_sql(query, conn)
crsp=crsp_sb
crsp.dropna(subset=['median_mkt_cap'], inplace=True)

crsp['size_portfolio']=np.where(crsp['market_equity']>crsp['median_mkt_cap'], "B", "S")

"""Fama French B/M, RE/M, CC/M Sort"""

crsp['date']=pd.to_datetime(crsp['date'])
bb=crsp[crsp['exchange']=="NYSE"]
bb.drop('level_0', axis=1, inplace=True)
bb.to_sql('bb', conn, if_exists='replace')

query='''
        SELECT DISTINCT permno, reference_date, book_to_market as book_to_market, contributed_capital_to_market, retained_earnings_to_market
        FROM bb
        '''

bb=pd.read_sql(query, conn)

bb['bm_30'] = bb.groupby('reference_date')['book_to_market'].transform(lambda x: x.quantile(0.3))
bb['bm_70'] = bb.groupby('reference_date')['book_to_market'].transform(lambda x: x.quantile(0.7))

bb['cc_30'] = bb.groupby('reference_date')['contributed_capital_to_market'].transform(lambda x: x.quantile(0.3))
bb['cc_70'] = bb.groupby('reference_date')['contributed_capital_to_market'].transform(lambda x: x.quantile(0.7))


bb['re_30'] = bb.groupby('reference_date')['retained_earnings_to_market'].transform(lambda x: x.quantile(0.3))
bb['re_70'] = bb.groupby('reference_date')['retained_earnings_to_market'].transform(lambda x: x.quantile(0.7))

bb.to_sql('bb', conn, if_exists='replace')

query='''
        SELECT DISTINCT reference_date, bm_30, bm_70, cc_30, cc_70, re_30, re_70
        FROM bb
        '''
bb=pd.read_sql(query, conn)

crsp.drop(['level_0', 'Unnamed: 0', 'index'], axis=1, inplace=True)
crsp.to_sql('crsp', conn, if_exists='replace')
bb.to_sql('bb', conn, if_exists='replace')

query='''
        SELECT DISTINCT crsp.*, bb.bm_30, bb.bm_70, bb.cc_30, bb.cc_70, bb.re_30, bb.re_70
        FROM crsp
        LEFT JOIN bb
        ON crsp.reference_date=bb.reference_date
        '''
crsp_bb=pd.read_sql(query, conn)

crsp=crsp_bb

crsp['b/m_portfolio'] = np.where(crsp['book_to_market'] < crsp['bm_30'], 'growth',
                               np.where(crsp['book_to_market'] > crsp['bm_70'], 'value', 'neutral'))


crsp['cc/m_portfolio'] = np.where(crsp['contributed_capital_to_market'] < crsp['cc_30'], 'growth',
                               np.where(crsp['contributed_capital_to_market'] > crsp['cc_70'], 'value', 'neutral'))

crsp['re/m_portfolio'] = np.where(crsp['retained_earnings_to_market'] < crsp['re_30'], 'growth',
                               np.where(crsp['retained_earnings_to_market'] > crsp['re_70'], 'value', 'neutral'))

crsp=crsp[("1964-07-01"<=crsp['date']) & (crsp['date']< "2018-01-01")]

"""Panel A"""

#Create DF

row_names = ['Average Annualized Return', 'Standard Deviation', 't-value']
column_names = ['Mkt-RF', 'SMB', 'HML', 'HML_', 'HML_RE', 'HML_CC']

panel_a= pd.DataFrame(index=row_names, columns=column_names)

#valueWeightRet=main_stocks_df.groupby(['date', 'size_portfolio', 'value_portfolio']).apply(lambda x: np.average(pd.to_numeric(x['ret']), weights=pd.to_numeric(x['mkt_cap_weight'])))
for x, y in zip(['b', 're', 'cc'], ['HML_', 'HML_RE', 'HML_CC']):
  returns=crsp.groupby(['date', 'size_portfolio', f'{x}/m_portfolio' ]).apply(lambda x: np.average(pd.to_numeric(x['ret_adj']), weights=pd.to_numeric(x['market_equity'])))

  returns=returns.to_frame().reset_index()

  returns['date'] = pd.to_datetime(returns['date'])

  # Pivot the DataFrame to wide format
  returns = returns.pivot(index='date', columns=['size_portfolio', f'{x}/m_portfolio'], values=0)

  returns.columns = returns.columns.map('_'.join)

  # Reset the index
  returns.reset_index(inplace=True)

  returns['HML'] = 0.5 * (returns['S_value'] + returns['B_value']) - 0.5 * (returns['S_growth'] + returns['B_growth'])

  locals()[f"{y}"]=returns[['date', 'HML']]
  locals()[f"{y}"].rename(columns={'HML': y}, inplace=True)
  hml=returns['HML'].mean()
  hml/=100
  annualized_average_return = ((1 + hml) ** 12) - 1
  annualized_average_return=annualized_average_return*100

  # Calculate the monthly decimal returns
  returns['HML_decimal'] = returns['HML'] / 100 + 1

  # Calculate the standard deviation of the monthly decimal returns
  monthly_std_decimal = returns['HML_decimal'].std()

  # Annualize the standard deviation
  annualized_std_decimal = (monthly_std_decimal * np.sqrt(12))*100

  import numpy as np

  # Calculate the mean and standard deviation of HML
  hml_mean = returns['HML'].mean()
  hml_std = returns['HML'].std()

  # Calculate the number of observations (N)
  N = len(returns)

  # Calculate the standard error of the mean
  hml_standard_error = hml_std / np.sqrt(N)

  # Calculate the t-statistic
  hml_t_statistic = hml_mean / hml_standard_error

  panel_a.loc['Average Annualized Return', y] = annualized_average_return
  panel_a.loc['Standard Deviation', y] = annualized_std_decimal
  panel_a.loc['t-value', y] = hml_t_statistic

panel_a

"""Now add in standard Fama and French Factors"""

import pandas_datareader.data as web
from pandas_datareader.famafrench import get_available_datasets
datasets = get_available_datasets()
#FF 5 FACTORS + MOMENTUM FACTOR
df_5_factor=[dataset for dataset in datasets if 'Research' in dataset and 'Factor' in dataset]
df_mom_factor=[dataset for dataset in datasets if 'Momentum' in dataset and 'Factor' in dataset]
ff=web.DataReader(df_5_factor[0],'famafrench',start='1963-07-01',end='2022-11-01')[0]
ff.reset_index(inplace=True)
ff=ff[("1964-07-01"<=ff['Date']) & (ff['Date']<"2018-01-01")]

ff['Date'] = pd.to_datetime(ff['Date'].dt.to_timestamp())
ff['period'] = ff['Date'].dt.to_period('M')

ep=[dataset for dataset in datasets if '6_Portfolios_ME_EP_2x3' in dataset]
ep=web.DataReader(ep[0],'famafrench',start='1963-07-01',end='2022-11-01')[0]
ep['EP']=0.5*(ep['SMALL HiEP']+ ep['BIG HiEP'])-0.5*(ep['SMALL LoEP']+ep['BIG LoEP'])

ep.reset_index(inplace=True)
ep['Date']=pd.to_datetime(ep['Date'].apply(str))
ep=ep[("1964-07-01"<=ep['Date']) & (ep['Date']< "2018-01-01")]
#ep['EP']/=100
ep.rename(columns={'Date': 'date'}, inplace=True)

ep=ep[['date', 'EP']]

ff = pd.merge(ff, ep, on='date')

ep['EP']/=100
factor=ep['EP'].mean()
annualized_average_return = ((1 + factor) ** 12) - 1
annualized_average_return=annualized_average_return*100
annualized_average_return

monthly_std_decimal = ep['EP'].std()
annualized_std_decimal = (monthly_std_decimal * np.sqrt(12))*100
annualized_std_decimal

annualized_average_return

hml_mean = ep['EP'].mean()
hml_std = ep['EP'].std()

# Calculate the number of observations (N)
N = len(ep)

# Calculate the standard error of the mean
hml_standard_error = hml_std / np.sqrt(N)

# Calculate the t-statistic
hml_t_statistic = hml_mean / hml_standard_error
hml_t_statistic

for x in ['Mkt-RF', 'SMB', 'HML', 'EP']:
  ff[x]/=100
  factor=ff[x].mean()
  annualized_average_return = ((1 + factor) ** 12) - 1
  annualized_average_return=annualized_average_return*100

  # Calculate the monthly decimal returns
  ff[f'{x}_decimal'] = ff[x] / 100 + 1

  # Calculate the standard deviation of the monthly decimal returns
  monthly_std_decimal = ff[f'{x}_decimal'].std()

  # Annualize the standard deviation
  annualized_std_decimal = (monthly_std_decimal * np.sqrt(12))*100

  # Calculate the mean and standard deviation of HML
  hml_mean = ff[x].mean()
  hml_std = ff[x].std()

  # Calculate the number of observations (N)
  N = len(ff)

  # Calculate the standard error of the mean
  hml_standard_error = hml_std / np.sqrt(N)

  # Calculate the t-statistic
  hml_t_statistic = hml_mean / hml_standard_error

  panel_a.loc['Average Annualized Return', x] = annualized_average_return
  panel_a.loc['Standard Deviation', x] = annualized_std_decimal * 100
  panel_a.loc['t-value', x] = hml_t_statistic

# Ensure that all columns in the DataFrame have a float data type
panel_a = panel_a.astype(float)

# Round the values in the DataFrame to two decimal places
panel_a = panel_a.round(2)

# Print the rounded DataFrame
print(panel_a)

panel_a

"""Panel B"""

for x in [ HML_, HML_CC, HML_RE]:
  x['date']=pd.to_datetime(x['date'])

ff.rename(columns={'Date': 'date'}, inplace=True)
import pandas as pd

# merge ff and HML_ data frames
merged_df = pd.merge(ff, HML_, on='date')

# merge HML_CC and HML_RE data frames
merged_df = pd.merge(merged_df, HML_CC, on='date')
merged_df = pd.merge(merged_df, HML_RE, on='date')
corr=merged_df

for x in [HML_, HML_CC, HML_RE]:
  x['period']=(pd.to_datetime(x['date'])).dt.to_period('M')

#ff.rename(columns={'Date': 'date'}, inplace=True)
import pandas as pd

# merge ff and HML_ data frames
merged_df = pd.merge(ff, HML_, on='period')
merged_df

# merge HML_CC and HML_RE data frames
merged_df = pd.merge(merged_df, HML_CC, on='period')
merged_df = pd.merge(merged_df, HML_RE, on='period')
corr=merged_df
corr

corr=corr[['Mkt-RF', 'SMB', 'HML',  'HML_RE', 'HML_CC', 'EP']]
panel_b=corr.corr()
panel_b=panel_b.round(2)
print(panel_b)

"""Panel C"""

from statsmodels.regression.linear_model import OLS
df=corr
final_df = pd.DataFrame(columns=['HML_1', 'HML_2', 'HML_RE_3', 'HML_RE_4', 'HML_CC_5', 'HML_CC_6', 'EP_7', 'EP_8', 'EP_9'],
                  index=['ALPHA', 'MKT', 'SMB', 'HML', 'HML_RE', 'HML_CC'])

df

final_df = pd.DataFrame(columns=['HML_1', 'HML_2', 'HML_RE_3', 'HML_RE_4', 'HML_CC_5', 'HML_CC_6'],
                  index=['ALPHA', 'MKT', 'SMB', 'HML', 'HML_RE', 'HML_CC', 'Adj_R^2'])

df[['Mkt-RF', 'SMB', 'HML', 'EP']]*=100

#HML REGRESSION 1
y=df['HML']
x=df[['Mkt-RF', 'SMB', 'HML_RE']]
x = sm.add_constant(x)

model=sm.OLS(y, x).fit()
adj_r_squared = model.rsquared_adj

final_df.at['ALPHA', 'HML_1'] = '{:.2f} ({:.2f})'.format(model.params[0], model.tvalues[0])
final_df.at['MKT', 'HML_1'] = '{:.2f} ({:.2f})'.format(model.params[1], model.tvalues[1])
final_df.at['SMB', 'HML_1'] = '{:.2f} ({:.2f})'.format(model.params[2], model.tvalues[2])
final_df.at['HML_RE', 'HML_1'] = '{:.2f} ({:.2f})'.format(model.params[3], model.tvalues[3])
final_df.at['Adj_R^2', 'HML_1'] = '{:.1f}'.format(adj_r_squared*100)


#HML REGRESSION 2
y=df['HML']
x=df[['Mkt-RF', 'SMB', 'HML_CC']]
x = sm.add_constant(x)

model=sm.OLS(y, x).fit()
adj_r_squared = model.rsquared_adj

final_df.at['ALPHA', 'HML_2'] = '{:.2f} ({:.2f})'.format(model.params[0], model.tvalues[0])
final_df.at['MKT', 'HML_2'] = '{:.2f} ({:.2f})'.format(model.params[1], model.tvalues[1])
final_df.at['SMB', 'HML_2'] = '{:.2f} ({:.2f})'.format(model.params[2], model.tvalues[2])
final_df.at['HML_CC', 'HML_2'] = '{:.2f} ({:.2f})'.format(model.params[3], model.tvalues[3])
final_df.at['Adj_R^2', 'HML_2'] = '{:.1f}'.format(adj_r_squared*100)

#HML_RE REGRESSION 1
y=df['HML_RE']
x=df[['Mkt-RF', 'SMB', 'HML']]
x = sm.add_constant(x)

model=sm.OLS(y, x).fit()
adj_r_squared = model.rsquared_adj

final_df.at['ALPHA', 'HML_RE_3'] = '{:.2f} ({:.2f})'.format(model.params[0], model.tvalues[0])
final_df.at['MKT', 'HML_RE_3'] = '{:.2f} ({:.2f})'.format(model.params[1], model.tvalues[1])
final_df.at['SMB', 'HML_RE_3'] = '{:.2f} ({:.2f})'.format(model.params[2], model.tvalues[2])
final_df.at['HML', 'HML_RE_3'] = '{:.2f} ({:.2f})'.format(model.params[3], model.tvalues[3])
final_df.at['Adj_R^2', 'HML_RE_3'] = '{:.1f}'.format(adj_r_squared*100)


#HML_RE REGRESSION 2
y=df['HML_RE']
x=df[['Mkt-RF', 'SMB', 'HML_CC']]
x = sm.add_constant(x)

model=sm.OLS(y, x).fit()
adj_r_squared = model.rsquared_adj

final_df.at['ALPHA', 'HML_RE_4'] = '{:.2f} ({:.2f})'.format(model.params[0], model.tvalues[0])
final_df.at['MKT', 'HML_RE_4'] = '{:.2f} ({:.2f})'.format(model.params[1], model.tvalues[1])
final_df.at['SMB', 'HML_RE_4'] = '{:.2f} ({:.2f})'.format(model.params[2], model.tvalues[2])
final_df.at['HML_CC', 'HML_RE_4'] = '{:.2f} ({:.2f})'.format(model.params[3], model.tvalues[3])
final_df.at['Adj_R^2', 'HML_RE_4'] = '{:.1f}'.format(adj_r_squared*100)

#HML_RE REGRESSION 1
y=df['HML_CC']
x=df[['Mkt-RF', 'SMB', 'HML']]
x = sm.add_constant(x)

model=sm.OLS(y, x).fit()
adj_r_squared = model.rsquared_adj

final_df.at['ALPHA', 'HML_CC_5'] = '{:.2f} ({:.2f})'.format(model.params[0], model.tvalues[0])
final_df.at['MKT', 'HML_CC_5'] = '{:.2f} ({:.2f})'.format(model.params[1], model.tvalues[1])
final_df.at['SMB', 'HML_CC_5'] = '{:.2f} ({:.2f})'.format(model.params[2], model.tvalues[2])
final_df.at['HML', 'HML_CC_5'] = '{:.2f} ({:.2f})'.format(model.params[3], model.tvalues[3])
final_df.at['Adj_R^2', 'HML_CC_5'] = '{:.1f}'.format(adj_r_squared*100)

#HML_RE REGRESSION 2
y=df['HML_CC']
x=df[['Mkt-RF', 'SMB', 'HML_RE']]
x = sm.add_constant(x)

model=sm.OLS(y, x).fit()
adj_r_squared = model.rsquared_adj

final_df.at['ALPHA', 'HML_CC_6'] = '{:.2f} ({:.2f})'.format(model.params[0], model.tvalues[0])
final_df.at['MKT', 'HML_CC_6'] = '{:.2f} ({:.2f})'.format(model.params[1], model.tvalues[1])
final_df.at['SMB', 'HML_CC_6'] = '{:.2f} ({:.2f})'.format(model.params[2], model.tvalues[2])
final_df.at['HML_RE', 'HML_CC_6'] = '{:.2f} ({:.2f})'.format(model.params[3], model.tvalues[3])
final_df.at['Adj_R^2', 'HML_CC_6'] = '{:.1f}'.format(adj_r_squared*100)

panel_c=final_df.fillna("-")
panel_c

df